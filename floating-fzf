#!/bin/sh

# open a floating fzf window and return the result dmenu-style

# raise an error if stdin is empty
if test -t 0; then
    echo "You must provide options to choose from via stdin" >&2
    exit 1
fi

# open fifos so that we can write to and read from fzf inside the Alacritty process
fzf_input="/tmp/fzf_input"
fzf_output="/tmp/fzf_output"

cleanup () {
    rm "${fzf_output}"
    rm "${fzf_input}"
}

# create the fifos and be ready to clean them up when we exit
mkfifo "${fzf_input}"
mkfifo "${fzf_output}"
trap cleanup EXIT


# having trouble implementing argument passthrough. Turns out it's really hard
# when you have to pass it through and extra layer of quotes
# https://stackoverflow.com/questions/1668649/how-to-keep-quotes-in-bash-arguments
#
# fzf_args=()
# for i in "$@"; do
#     fzf_args+=("$i")  # Need quotes here to append as a single array element.
# done
# echo "fzf ${fzf_args[@]} <${fzf_input} >${fzf_output}"

# disown the process so that foot can do its own thing
# if we don't do this, foot will have a blocked pipe because
# it'll be waiting for the command below to read and clear the output
foot --log-level=none --title='!floating-fzf' \
    zsh -c "fzf <${fzf_input} >${fzf_output}" \
    & disown

# read floating-fzf's stdin and write it to the input fifo
cat </dev/stdin >"${fzf_input}"

fzf_selection=$(cat < "${fzf_output}")

# ideally, I'd like to write fzf's stderr to this script's stderr
# and exit using fzf's exit code, but there's a few complications.
# 1. Alacritty doesn't support custom exit codes. It's entirely up
#   to the Alacritty devs on how it exits
#   https://github.com/alacritty/alacritty/issues/5055
# 2. fzf bugs out when I pipe its stderr to anything. Maybe it uses
#   stderr to do the interactive selection?
#
# This if-block allows us to work around this by just checking
# if we made a selection.
if [[ -z "${fzf_selection}" ]]; then
    echo "no fzf selection was made" >&2
    exit 130
fi

echo "${fzf_selection}"
